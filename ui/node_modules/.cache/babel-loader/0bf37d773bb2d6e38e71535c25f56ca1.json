{"ast":null,"code":"var _jsxFileName = \"D:\\\\uni\\\\tamago\\\\ui\\\\src\\\\components\\\\HomePage\\\\QuizSection\\\\components\\\\Quiz.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Question from '../components/Question';\nimport QuestionCount from '../components/QuestionCount';\nimport AnswerOption from '../components/AnswerOption';\n\nfunction Quiz(props) {\n  if (props.generateNew === true) {\n    props.loadDatabase();\n  }\n\n  function renderAnswerOptions(key) {\n    console.log(props);\n    return React.createElement(AnswerOption, {\n      key: key.content,\n      answerContent: key.content,\n      answerType: key.type,\n      answer: props.answer,\n      questionId: props.questionId,\n      onAnswerSelected: props.onAnswerSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n  }\n\n  if (props.questions.length >= props.questionTotal) {\n    return React.createElement(CSSTransitionGroup, {\n      className: \"container\",\n      component: \"div\",\n      transitionName: \"fade\",\n      transitionEnterTimeout: 800,\n      transitionLeaveTimeout: 500,\n      transitionAppear: true,\n      transitionAppearTimeout: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      key: props.questionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(QuestionCount, {\n      counter: props.questionId,\n      total: props.questionTotal,\n      currQuestion: props.currQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(Question, {\n      content: props.currQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      className: \"currentAnswers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, props.currentAnswers.map(renderAnswerOptions))));\n  } else if (props.questions.length > 0) {\n    return React.createElement(CSSTransitionGroup, {\n      className: \"container\",\n      component: \"div\",\n      transitionName: \"fade\",\n      transitionEnterTimeout: 800,\n      transitionLeaveTimeout: 500,\n      transitionAppear: true,\n      transitionAppearTimeout: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      key: props.questionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Not enough words to form a quiz!\"), React.createElement(Question, {\n      content: \"Not enough words to form a quiz!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n}\n\nQuiz.propTypes = {\n  answer: PropTypes.string.isRequired,\n  currentAnswers: PropTypes.array.isRequired,\n  currQuestion: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  onAnswerSelected: PropTypes.func.isRequired,\n  loadDatabase: PropTypes.func.isRequired\n};\nexport default Quiz;","map":{"version":3,"sources":["D:\\uni\\tamago\\ui\\src\\components\\HomePage\\QuizSection\\components\\Quiz.js"],"names":["React","PropTypes","CSSTransitionGroup","Question","QuestionCount","AnswerOption","Quiz","props","generateNew","loadDatabase","renderAnswerOptions","key","console","log","content","type","answer","questionId","onAnswerSelected","questions","length","questionTotal","currQuestion","currentAnswers","map","propTypes","string","isRequired","array","number","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransitionGroup } from 'react-transition-group';\r\nimport Question from '../components/Question';\r\nimport QuestionCount from '../components/QuestionCount';\r\nimport AnswerOption from '../components/AnswerOption';\r\n\r\nfunction Quiz(props) {\r\n  if (props.generateNew === true) {\r\n    props.loadDatabase();\r\n  }\r\n  function renderAnswerOptions(key) {\r\n    console.log(props);\r\n    return (\r\n      <AnswerOption\r\n        key={key.content}\r\n        answerContent={key.content}\r\n        answerType={key.type}\r\n        answer={props.answer}\r\n        questionId={props.questionId}\r\n        onAnswerSelected={props.onAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n  if (props.questions.length >= props.questionTotal) {\r\n\r\n\r\n    return (\r\n      <CSSTransitionGroup\r\n        className=\"container\"\r\n        component=\"div\"\r\n        transitionName=\"fade\"\r\n        transitionEnterTimeout={800}\r\n        transitionLeaveTimeout={500}\r\n        transitionAppear\r\n        transitionAppearTimeout={500}\r\n      >\r\n        <div key={props.questionId}>\r\n          <QuestionCount counter={props.questionId} total={props.questionTotal} currQuestion={props.currQuestion} />\r\n          <Question content={props.currQuestion} />\r\n          <ul className=\"currentAnswers\">\r\n            {props.currentAnswers.map(renderAnswerOptions)}\r\n          </ul>\r\n        </div>\r\n      </CSSTransitionGroup>\r\n    );\r\n  }\r\n  else if (props.questions.length > 0) {\r\n    return (\r\n      <CSSTransitionGroup\r\n        className=\"container\"\r\n        component=\"div\"\r\n        transitionName=\"fade\"\r\n        transitionEnterTimeout={800}\r\n        transitionLeaveTimeout={500}\r\n        transitionAppear\r\n        transitionAppearTimeout={500}\r\n      >\r\n        <div key={props.questionId}>\r\n          <p>Not enough words to form a quiz!</p>\r\n          <Question content={\"Not enough words to form a quiz!\"} />\r\n        </div>\r\n      </CSSTransitionGroup>\r\n    );\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n}\r\n\r\nQuiz.propTypes = {\r\n  answer: PropTypes.string.isRequired,\r\n  currentAnswers: PropTypes.array.isRequired,\r\n  currQuestion: PropTypes.string.isRequired,\r\n  questionId: PropTypes.number.isRequired,\r\n  questionTotal: PropTypes.number.isRequired,\r\n  onAnswerSelected: PropTypes.func.isRequired,\r\n  loadDatabase: PropTypes.func.isRequired,\r\n\r\n};\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}