{"ast":null,"code":"import _classCallCheck from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\uni\\\\tamago\\\\ui\\\\src\\\\components\\\\HomePage\\\\PetSection\\\\PetCard\\\\CountdownTimers\\\\FoodTimer.js\";\nimport React from 'react';\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example() {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this));\n    _this.state = {\n      time: {},\n      seconds: 10,\n      restart: false\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours = Math.floor(secs / (60 * 60));\n      var divisor_for_minutes = secs % (60 * 60);\n      var minutes = Math.floor(divisor_for_minutes / 60);\n      var divisor_for_seconds = divisor_for_minutes % 60;\n      var seconds = Math.ceil(divisor_for_seconds);\n      var obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var timeLeftVar = this.secondsToTime(this.state.seconds);\n      this.setState({\n        time: timeLeftVar\n      });\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer === 0 && this.state.seconds > 0) {\n        this.setState({\n          seconds: 10\n        });\n        this.timer = setInterval(this.countDown, 1000);\n      }\n\n      console.log(this.state.seconds);\n    }\n  }, {\n    key: \"restartTimer\",\n    value: function restartTimer() {}\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      if (!this.state.restart) {\n        // Remove one second, set state so a re-render happens.\n        var seconds = this.state.seconds - 1;\n        this.setState({\n          time: this.secondsToTime(seconds),\n          seconds: seconds\n        }); // Check if we're at zero.\n\n        if (seconds === 0) {\n          clearInterval(this.timer); //PET DEAD\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.startTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"button\", {\n        onClick: this.restartTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Restart\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"m: \", this.state.time.m, \" s: \", this.state.time.s));\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport default Example;","map":{"version":3,"sources":["D:\\uni\\tamago\\ui\\src\\components\\HomePage\\PetSection\\PetCard\\CountdownTimers\\FoodTimer.js"],"names":["React","Example","state","time","seconds","restart","timer","startTimer","bind","countDown","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","timeLeftVar","secondsToTime","setState","setInterval","console","log","clearInterval","restartTimer","m","s","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,O;;;;;AACJ,qBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,OAAO,EAAE;AAHE,KAAb;AAKA,UAAKC,KAAL,GAAa,CAAb;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AATY;AAUb;;;;kCAEaE,I,EAAK;AACjB,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,IAAI,KAAK,EAAT,CAAf,CAAZ;AAEA,UAAII,mBAAmB,GAAGJ,IAAI,IAAI,KAAK,EAAT,CAA9B;AACA,UAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAd;AAEA,UAAIE,mBAAmB,GAAGF,mBAAmB,GAAG,EAAhD;AACA,UAAIV,OAAO,GAAGQ,IAAI,CAACK,IAAL,CAAUD,mBAAV,CAAd;AAEA,UAAIE,GAAG,GAAG;AACR,aAAKP,KADG;AAER,aAAKI,OAFG;AAGR,aAAKX;AAHG,OAAV;AAKA,aAAOc,GAAP;AACD;;;wCAEmB;AAClB,UAAIC,WAAW,GAAG,KAAKC,aAAL,CAAmB,KAAKlB,KAAL,CAAWE,OAA9B,CAAlB;AACA,WAAKiB,QAAL,CAAc;AAAElB,QAAAA,IAAI,EAAEgB;AAAR,OAAd;AACD;;;iCAEY;AACX,UAAI,KAAKb,KAAL,KAAe,CAAf,IAAoB,KAAKJ,KAAL,CAAWE,OAAX,GAAqB,CAA7C,EAAgD;AAC9C,aAAKiB,QAAL,CAAc;AACZjB,UAAAA,OAAO,EAAE;AADG,SAAd;AAGA,aAAKE,KAAL,GAAagB,WAAW,CAAC,KAAKb,SAAN,EAAiB,IAAjB,CAAxB;AACD;;AACDc,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAL,CAAWE,OAAvB;AACD;;;mCAEa,CAEb;;;gCAGW;AACV,UAAG,CAAC,KAAKF,KAAL,CAAWG,OAAf,EAAuB;AACvB;AACE,YAAID,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,aAAKiB,QAAL,CAAc;AACZlB,UAAAA,IAAI,EAAE,KAAKiB,aAAL,CAAmBhB,OAAnB,CADM;AAEZA,UAAAA,OAAO,EAAEA;AAFG,SAAd,EAHqB,CAQrB;;AACA,YAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjBqB,UAAAA,aAAa,CAAC,KAAKnB,KAAN,CAAb,CADiB,CAGjB;AACD;AACF;AACF;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAQ,QAAA,OAAO,EAAE,KAAKmB,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACM,KAAKxB,KAAL,CAAWC,IAAX,CAAgBwB,CADtB,UAC6B,KAAKzB,KAAL,CAAWC,IAAX,CAAgByB,CAD7C,CAHF,CADF;AASD;;;;EA9EmB5B,KAAK,CAAC6B,S;;AAiF5B,eAAe5B,OAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Example extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { \r\n      time: {}, \r\n      seconds: 10,\r\n      restart: false,\r\n      };\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  secondsToTime(secs){\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      \"h\": hours,\r\n      \"m\": minutes,\r\n      \"s\": seconds\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n    this.setState({ time: timeLeftVar });\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timer === 0 && this.state.seconds > 0) {\r\n      this.setState({\r\n        seconds: 10,\r\n      });\r\n      this.timer = setInterval(this.countDown, 1000);      \r\n    }\r\n    console.log(this.state.seconds);\r\n  }\r\n\r\n  restartTimer(){\r\n\r\n  }\r\n\r\n\r\n  countDown() {\r\n    if(!this.state.restart){\r\n    // Remove one second, set state so a re-render happens.\r\n      let seconds = this.state.seconds - 1;\r\n      this.setState({\r\n        time: this.secondsToTime(seconds),\r\n        seconds: seconds,\r\n      });\r\n      \r\n      // Check if we're at zero.\r\n      if (seconds === 0) { \r\n        clearInterval(this.timer);\r\n        \r\n        //PET DEAD\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <button onClick={this.startTimer}>Start</button>\r\n        <button onClick={this.restartTimer}>Restart</button>\r\n        <h3>\r\n          m: {this.state.time.m} s: {this.state.time.s}\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}