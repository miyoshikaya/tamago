{"ast":null,"code":"import _defineProperty from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\uni\\\\tamago\\\\ui\\\\src\\\\components\\\\HomePage\\\\QuizSection\\\\QuizCard.js\";\nimport React, { Component } from 'react';\nimport './quizcard.css';\nimport quizQuestions from './api/quizQuestions.js';\nimport Quiz from './components/Quiz.js';\nimport Result from './components/Result.js';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/database';\n\nvar QuizCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizCard, _Component);\n\n  function QuizCard(props) {\n    var _this;\n\n    _classCallCheck(this, QuizCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizCard).call(this, props));\n\n    if (firebase.apps.length) {\n      _this.app = firebase.app().firestore();\n      _this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/0/jpn-cards-animals\");\n      console.log('juz jest');\n    }\n\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      questions: [],\n      ansOpt: [],\n      currentAnswers: [],\n      currQuestion: 'Which word means lel in Japanese?',\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        correct: 0,\n        incorrect: 0\n      },\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(QuizCard, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var questionList;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                questionList = this.state.questions;\n                this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/0/jpn-cards-animals\");\n                _context.next = 4;\n                return this.database.on('child_added', function (snap) {\n                  questionList.push({\n                    id: snap.key,\n                    eng: snap.val().eng,\n                    kan: snap.val().kan,\n                    rom: snap.val().rom\n                  });\n                });\n\n              case 4:\n                if (firebase.apps.length) {\n                  this.setState({\n                    questions: questionList\n                  });\n                  this.shuffleArray(this.state.questions); // this.database.on('child_added', snap => {\n                  //   questionList.push({\n                  //     id: snap.key,\n                  //     eng: snap.val().eng,\n                  //     kan: snap.val().kan,\n                  //     rom: snap.val().rom\n                  //   })\n                  // })\n                  // this.setState({\n                  //   questions: questionList,\n                  // })\n\n                  console.log(questionList.length);\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"lalala\",\n    value: function lalala() {\n      var optionList = this.state.ansOpt;\n      optionList.push({\n        answers: options,\n        rightAnswer: rightIndex\n      });\n\n      for (var index = 0; index < questionList.length; ++index) {\n        console.log(questionList.length);\n        var randomIndex = Math.floor(Math.random() * questionList.length);\n        var options = [];\n        options.push({\n          type: 'incorrect',\n          content: questionList[randomIndex].kan\n        });\n        randomIndex = Math.floor(Math.random() * questionList.length);\n        options.push({\n          type: 'incorrect',\n          content: questionList[randomIndex].kan\n        });\n        randomIndex = Math.floor(Math.random() * questionList.length);\n        options.push({\n          type: 'incorrect',\n          content: questionList[randomIndex].kan\n        });\n        var rightIndex = Math.floor(Math.random() * questionList.length);\n        options[rightIndex].type = 'correct';\n        options[rightIndex].content = questionList[index].kan;\n      }\n\n      this.setState({\n        ansOpt: optionList,\n        currentAnswers: optionList[0].answers,\n        currQuestion: 'Which word means lel in Japanese?'\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this2 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(function () {\n          return _this2.setNextQuestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this2.setResults(_this2.getResults());\n        }, 300);\n      }\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      this.setState(function (state, props) {\n        return {\n          answersCount: _objectSpread({}, state.answersCount, _defineProperty({}, answer, state.answersCount[answer] + 1)),\n          answer: answer\n        };\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        currQuestion: 'Which word means ' + this.questionList[counter].eng + ' in Japanese?',\n        currentAnswers: this.ansOpt[counter],\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      //tutaj zedytować tak, żeby dostać % poprawnych odpowiedzi\n      var answersCount = this.state.answersCount;\n      var answersCountKeys = Object.keys(answersCount);\n      var answersCountValues = answersCountKeys.map(function (key) {\n        return answersCount[key];\n      });\n      var maxAnswerCount = Math.max.apply(null, answersCountValues);\n      return answersCountKeys.filter(function (key) {\n        return answersCount[key] === maxAnswerCount;\n      });\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      if (result.length === 1) {\n        this.setState({\n          result: result[0]\n        });\n      } else {\n        this.setState({\n          result: '50% correct. Score 70% an above to get stuff for your pet'\n        });\n      }\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return React.createElement(Quiz, {\n        answer: this.state.answer,\n        currentAnswers: this.state.currentAnswers,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        questions: this.state.questions,\n        ansOpt: this.state.ansOpt,\n        currQuestion: this.state.currQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return QuizCard;\n}(Component);\n\nexport default QuizCard;","map":{"version":3,"sources":["D:\\uni\\tamago\\ui\\src\\components\\HomePage\\QuizSection\\QuizCard.js"],"names":["React","Component","quizQuestions","Quiz","Result","firebase","QuizCard","props","apps","length","app","firestore","database","ref","child","console","log","state","counter","questionId","questions","ansOpt","currentAnswers","currQuestion","question","answerOptions","answer","answersCount","correct","incorrect","result","handleAnswerSelected","bind","questionList","on","snap","push","id","key","eng","val","kan","rom","setState","shuffleArray","optionList","answers","options","rightAnswer","rightIndex","index","randomIndex","Math","floor","random","type","content","array","currentIndex","temporaryValue","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","map","maxAnswerCount","max","apply","filter","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './quizcard.css';\r\nimport quizQuestions from './api/quizQuestions.js';\r\nimport Quiz from './components/Quiz.js';\r\nimport Result from './components/Result.js';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/database';\r\n\r\nclass QuizCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (firebase.apps.length) {\r\n      this.app = firebase.app().firestore();\r\n      this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/0/jpn-cards-animals\");\r\n      console.log('juz jest');\r\n    }\r\n\r\n\r\n    this.state = {\r\n      counter: 0,\r\n      questionId: 1,\r\n      questions: [],\r\n      ansOpt: [],\r\n      currentAnswers: [],\r\n      currQuestion: 'Which word means lel in Japanese?',\r\n      question: '',\r\n      answerOptions: [],\r\n      answer: '',\r\n      answersCount: {\r\n        correct: 0,\r\n        incorrect: 0,\r\n      },\r\n      result: ''\r\n    };\r\n\r\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n  }\r\n\r\n\r\n  async componentWillMount() {\r\n\r\n    const questionList = this.state.questions;\r\n\r\n    this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/0/jpn-cards-animals\");\r\n    await this.database.on('child_added', snap => {\r\n      questionList.push({\r\n        id: snap.key,\r\n        eng: snap.val().eng,\r\n        kan: snap.val().kan,\r\n        rom: snap.val().rom\r\n      })\r\n    })\r\n\r\n    if (firebase.apps.length) {\r\n      this.setState({\r\n        questions: questionList,\r\n      });\r\n      this.shuffleArray(this.state.questions);\r\n\r\n      // this.database.on('child_added', snap => {\r\n      //   questionList.push({\r\n      //     id: snap.key,\r\n      //     eng: snap.val().eng,\r\n      //     kan: snap.val().kan,\r\n      //     rom: snap.val().rom\r\n      //   })\r\n      // })\r\n\r\n      // this.setState({\r\n      //   questions: questionList,\r\n      // })\r\n\r\n    \r\n      console.log(questionList.length);\r\n\r\n      \r\n    }\r\n  }\r\n\r\n  lalala(){\r\n    const optionList = this.state.ansOpt;\r\n\r\n    optionList.push({\r\n          answers: options,\r\n          rightAnswer: rightIndex,\r\n        })\r\n\r\n    for (var index = 0; index < questionList.length; ++index) {\r\n        console.log(questionList.length);\r\n        var randomIndex = Math.floor(Math.random() * questionList.length);\r\n\r\n        var options = [];\r\n        options.push({\r\n          type: 'incorrect',\r\n          content: questionList[randomIndex].kan,\r\n        })\r\n\r\n        randomIndex = Math.floor(Math.random() * questionList.length);\r\n        options.push({\r\n          type: 'incorrect',\r\n          content: questionList[randomIndex].kan,\r\n        })\r\n\r\n        randomIndex = Math.floor(Math.random() * questionList.length);\r\n        options.push({\r\n          type: 'incorrect',\r\n          content: questionList[randomIndex].kan,\r\n        })\r\n        var rightIndex = Math.floor(Math.random() * questionList.length);\r\n        options[rightIndex].type = 'correct';\r\n        options[rightIndex].content = questionList[index].kan;\r\n\r\n      }\r\n\r\n    this.setState({\r\n        ansOpt: optionList,\r\n        currentAnswers: optionList[0].answers,\r\n        currQuestion: 'Which word means lel in Japanese?',\r\n      });\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    var currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  handleAnswerSelected(event) {\r\n    this.setUserAnswer(event.currentTarget.value);\r\n\r\n    if (this.state.questionId < quizQuestions.length) {\r\n      setTimeout(() => this.setNextQuestion(), 300);\r\n    } else {\r\n      setTimeout(() => this.setResults(this.getResults()), 300);\r\n    }\r\n  }\r\n\r\n  setUserAnswer(answer) {\r\n    this.setState((state, props) => ({\r\n      answersCount: {\r\n        ...state.answersCount,\r\n        [answer]: state.answersCount[answer] + 1\r\n      },\r\n      answer: answer\r\n    }));\r\n  }\r\n\r\n  setNextQuestion() {\r\n    const counter = this.state.counter + 1;\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    this.setState({\r\n      counter: counter,\r\n      questionId: questionId,\r\n      question: quizQuestions[counter].question,\r\n      currQuestion: 'Which word means ' + this.questionList[counter].eng + ' in Japanese?',\r\n      currentAnswers: this.ansOpt[counter],\r\n      answerOptions: quizQuestions[counter].answers,\r\n      answer: ''\r\n    });\r\n  }\r\n\r\n  getResults() {\r\n    //tutaj zedytować tak, żeby dostać % poprawnych odpowiedzi\r\n    const answersCount = this.state.answersCount;\r\n    const answersCountKeys = Object.keys(answersCount);\r\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\r\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n\r\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\r\n  }\r\n\r\n  setResults(result) {\r\n    if (result.length === 1) {\r\n      this.setState({ result: result[0] });\r\n    } else {\r\n      this.setState({ result: '50% correct. Score 70% an above to get stuff for your pet' });\r\n    }\r\n  }\r\n\r\n  renderQuiz() {\r\n    return (\r\n      <Quiz\r\n        answer={this.state.answer}\r\n        currentAnswers={this.state.currentAnswers}\r\n        answerOptions={this.state.answerOptions}\r\n        questionId={this.state.questionId}\r\n        question={this.state.question}\r\n        questionTotal={quizQuestions.length}\r\n        onAnswerSelected={this.handleAnswerSelected}\r\n        questions={this.state.questions}\r\n        ansOpt={this.state.ansOpt}\r\n        currQuestion={this.state.currQuestion}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderResult() {\r\n    return <Result quizResult={this.state.result} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizCard;"]},"metadata":{},"sourceType":"module"}