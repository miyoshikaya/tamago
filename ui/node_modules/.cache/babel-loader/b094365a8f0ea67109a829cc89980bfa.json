{"ast":null,"code":"import _defineProperty from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\uni\\\\tamago\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\uni\\\\tamago\\\\ui\\\\src\\\\components\\\\HomePage\\\\QuizSection\\\\QuizCard\\\\QuizCard.js\";\nimport React, { Component } from 'react';\nimport './quizcard.css';\nimport Quiz from './../components/Quiz.js';\nimport Result from './../components/Result.js';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/database';\n\nvar QuizCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizCard, _Component);\n\n  function QuizCard(props) {\n    var _this;\n\n    _classCallCheck(this, QuizCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizCard).call(this, props));\n\n    if (firebase.apps.length) {\n      _this.app = firebase.app().firestore();\n    }\n\n    _this.state = {\n      counter: 0,\n      questionId: 1,\n      questions: [],\n      ansOpt: [],\n      currentAnswers: [],\n      currQuestion: '',\n      question: '',\n      questionTotal: 10,\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        correct: 0,\n        incorrect: 0\n      },\n      result: '',\n      category: _this.props.category,\n      quizDone: false\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.loadDatabase = _this.loadDatabase.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(QuizCard, [{\n    key: \"loadDatabase\",\n    value: function loadDatabase() {\n      console.log('quiz completion: ' + this.state.quizDone);\n\n      switch (this.props.category) {\n        case 'Animals':\n          this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/0/jpn-cards-animals\");\n          break;\n\n        case 'People':\n          this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/1/jpn-cards-people\");\n          break;\n\n        case 'Food':\n          this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/2/jpn-cards-food\");\n          break;\n\n        default:\n          break;\n      }\n\n      var questionList = this.state.questions;\n      this.database.on('child_added', function (snap) {\n        questionList.push({\n          id: snap.key,\n          eng: snap.val().eng,\n          kan: snap.val().kan,\n          rom: snap.val().rom\n        });\n      });\n\n      if (firebase.apps.length) {\n        if (questionList.length > 0) {\n          this.setState({\n            questions: questionList\n          });\n        }\n\n        this.shuffleArray(this.state.questions);\n        var optionList = this.state.ansOpt;\n\n        for (var index = 0; index < questionList.length; ++index) {\n          var firstIndex = Math.floor(Math.random() * questionList.length);\n\n          while (firstIndex === index) {\n            firstIndex = Math.floor(Math.random() * questionList.length);\n          }\n\n          var options = [];\n          options.push({\n            type: \"incorrect\",\n            content: questionList[firstIndex].kan\n          });\n          var secondIndex = Math.floor(Math.random() * questionList.length);\n\n          while (secondIndex === index || secondIndex === firstIndex) {\n            secondIndex = Math.floor(Math.random() * questionList.length);\n          }\n\n          options.push({\n            type: \"incorrect\",\n            content: questionList[secondIndex].kan\n          });\n          var thirdIndex = Math.floor(Math.random() * questionList.length);\n\n          while (thirdIndex === index || thirdIndex === firstIndex || thirdIndex === secondIndex) {\n            thirdIndex = Math.floor(Math.random() * questionList.length);\n          }\n\n          options.push({\n            type: \"incorrect\",\n            content: questionList[thirdIndex].kan\n          });\n          var rightIndex = Math.floor(Math.random() * options.length); //console.log(rightIndex);\n\n          options[rightIndex].type = \"correct\";\n          options[rightIndex].content = questionList[index].kan;\n          optionList.push({\n            answers: options,\n            rightAnswer: rightIndex\n          });\n        }\n\n        if (questionList.length > 0) {\n          this.setState({\n            ansOpt: optionList,\n            currentAnswers: optionList[0].answers,\n            currQuestion: 'Which word means ' + this.state.questions[0].eng + ' in Japanese ? '\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      this.setState(function (state, props) {\n        return {\n          answersCount: _objectSpread({}, state.answersCount, _defineProperty({}, answer, state.answersCount[answer] + 1)),\n          answer: answer\n        };\n      });\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this2 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n\n      if (this.state.questionId < this.state.questionTotal) {\n        setTimeout(function () {\n          return _this2.setNextQuestion();\n        }, 300);\n      } else {\n        setTimeout(function () {\n          return _this2.setResults(_this2.getResults());\n        }, 300);\n      }\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        currQuestion: 'Which word means ' + this.state.questions[counter].eng + ' in Japanese?',\n        currentAnswers: this.state.ansOpt[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      var answersCount = this.state.answersCount;\n      var questionsTotal = this.state.questionTotal;\n      var resultPercentage = answersCount.correct / questionsTotal;\n      var resultString = resultPercentage * 100.0 + '%';\n\n      if (resultPercentage * 100.0 < 50) {\n        resultString = resultString + '. Score 70% an above to get stuff for your pet.';\n      }\n\n      return resultString;\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(result) {\n      this.setState({\n        result: result,\n        quizDone: true\n      });\n      console.log('quiz completion: ' + this.state.quizDone);\n      this.props.quizComplete(this.state.quizDone);\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(Quiz, {\n        answer: this.state.answer,\n        currentAnswers: this.state.currentAnswers,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: this.state.questionTotal,\n        onAnswerSelected: this.handleAnswerSelected,\n        loadDatabase: this.loadDatabase,\n        questions: this.state.questions,\n        ansOpt: this.state.ansOpt,\n        currQuestion: this.state.currQuestion,\n        getQuestion: this.getQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        quizResult: this.state.result,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"startNewQuiz\",\n    value: function startNewQuiz() {//(re-)starting new quiz\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, this.state.result ? this.renderResult() : renderQuiz());\n    }\n  }]);\n\n  return QuizCard;\n}(Component);\n\nexport default QuizCard;","map":{"version":3,"sources":["D:\\uni\\tamago\\ui\\src\\components\\HomePage\\QuizSection\\QuizCard\\QuizCard.js"],"names":["React","Component","Quiz","Result","firebase","QuizCard","props","apps","length","app","firestore","state","counter","questionId","questions","ansOpt","currentAnswers","currQuestion","question","questionTotal","answerOptions","answer","answersCount","correct","incorrect","result","category","quizDone","handleAnswerSelected","bind","loadDatabase","console","log","database","ref","child","questionList","on","snap","push","id","key","eng","val","kan","rom","setState","shuffleArray","optionList","index","firstIndex","Math","floor","random","options","type","content","secondIndex","thirdIndex","rightIndex","answers","rightAnswer","array","currentIndex","temporaryValue","randomIndex","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","questionsTotal","resultPercentage","resultString","quizComplete","getQuestion","renderResult","renderQuiz"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './quizcard.css';\r\nimport Quiz from './../components/Quiz.js';\r\nimport Result from './../components/Result.js';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/database';\r\n\r\nclass QuizCard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (firebase.apps.length) {\r\n      this.app = firebase.app().firestore(); \r\n    }\r\n\r\n    this.state = {\r\n      counter: 0,\r\n      questionId: 1,\r\n      questions: [],\r\n      ansOpt: [],\r\n      currentAnswers: [],\r\n      currQuestion: '',\r\n      question: '',\r\n      questionTotal: 10,\r\n      answerOptions: [],\r\n      answer: '',\r\n      answersCount: {\r\n        correct: 0,\r\n        incorrect: 0,\r\n      },\r\n      result: '',\r\n      category: this.props.category,\r\n      quizDone: false,\r\n    };\r\n\r\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n    this.loadDatabase = this.loadDatabase.bind(this);\r\n  }\r\n\r\n  loadDatabase() {\r\n    console.log('quiz completion: ' + this.state.quizDone);\r\n\r\n    switch(this.props.category){\r\n      case 'Animals':\r\n        this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/0/jpn-cards-animals\");\r\n        break;\r\n      case 'People':\r\n        this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/1/jpn-cards-people\");\r\n        break;\r\n      case 'Food':\r\n        this.database = firebase.app().database().ref().child(\"flashcards/1/jpn-cards/2/jpn-cards-food\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    const questionList = this.state.questions;\r\n\r\n    this.database.on('child_added', snap => {\r\n      questionList.push({\r\n        id: snap.key,\r\n        eng: snap.val().eng,\r\n        kan: snap.val().kan,\r\n        rom: snap.val().rom\r\n      })\r\n    })\r\n\r\n\r\n    if (firebase.apps.length) {\r\n\r\n      if (questionList.length > 0) {\r\n        this.setState({\r\n          questions: questionList,\r\n        })\r\n      }\r\n      this.shuffleArray(this.state.questions);\r\n\r\n      const optionList = this.state.ansOpt;\r\n\r\n      for (var index = 0; index < questionList.length; ++index) {\r\n        var firstIndex = Math.floor(Math.random() * questionList.length);\r\n\r\n        while (firstIndex === index) {\r\n          firstIndex = Math.floor(Math.random() * questionList.length);\r\n        }\r\n        const options = [];\r\n        options.push({\r\n          type: \"incorrect\",\r\n          content: questionList[firstIndex].kan,\r\n        })\r\n\r\n        var secondIndex = Math.floor(Math.random() * questionList.length);\r\n\r\n        while (secondIndex === index || secondIndex === firstIndex) {\r\n          secondIndex = Math.floor(Math.random() * questionList.length);\r\n        }\r\n        options.push({\r\n          type: \"incorrect\",\r\n          content: questionList[secondIndex].kan,\r\n        })\r\n\r\n        var thirdIndex = Math.floor(Math.random() * questionList.length);\r\n\r\n        while (thirdIndex === index || thirdIndex === firstIndex || thirdIndex === secondIndex) {\r\n          thirdIndex = Math.floor(Math.random() * questionList.length);\r\n        }\r\n        options.push({\r\n          type: \"incorrect\",\r\n          content: questionList[thirdIndex].kan,\r\n        })\r\n\r\n        var rightIndex = Math.floor(Math.random() * options.length);\r\n        //console.log(rightIndex);\r\n        options[rightIndex].type = \"correct\";\r\n        options[rightIndex].content = questionList[index].kan;\r\n\r\n        optionList.push({\r\n          answers: options,\r\n          rightAnswer: rightIndex,\r\n        })\r\n      }\r\n      if (questionList.length > 0) {\r\n        this.setState({\r\n\r\n          ansOpt: optionList,\r\n          currentAnswers: optionList[0].answers,\r\n          currQuestion: 'Which word means ' + this.state.questions[0].eng + ' in Japanese ? ',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    var currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\nsetUserAnswer(answer) {\r\n    this.setState((state, props) => ({\r\n      answersCount: {\r\n        ...state.answersCount,\r\n        [answer]: state.answersCount[answer] + 1\r\n      },\r\n      answer: answer\r\n    }));\r\n  }\r\n\r\n  handleAnswerSelected(event) {\r\n    this.setUserAnswer(event.currentTarget.value);\r\n\r\n    if (this.state.questionId < this.state.questionTotal) {\r\n      setTimeout(() => this.setNextQuestion(), 300);\r\n    } else {\r\n      setTimeout(() => this.setResults(this.getResults()), 300);\r\n    }\r\n  }\r\n \r\n\r\n  setNextQuestion() {\r\n    const counter = this.state.counter + 1;\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    this.setState({\r\n      counter: counter,\r\n      questionId: questionId,\r\n      currQuestion: 'Which word means ' + this.state.questions[counter].eng + ' in Japanese?',\r\n      currentAnswers: this.state.ansOpt[counter].answers,\r\n      answer: ''\r\n    });\r\n  }\r\n\r\n  getResults() {\r\n    const answersCount = this.state.answersCount;\r\n    const questionsTotal = this.state.questionTotal;\r\n    var resultPercentage = answersCount.correct / questionsTotal;\r\n    var resultString = resultPercentage * 100.0 + '%';\r\n\r\n    if(resultPercentage * 100.0 < 50){\r\n      resultString = resultString + '. Score 70% an above to get stuff for your pet.';\r\n    }\r\n    return resultString;\r\n  }\r\n\r\n  setResults(result) {\r\n    this.setState({\r\n      result: result,\r\n      quizDone: true,\r\n    });\r\n    console.log('quiz completion: ' + this.state.quizDone);\r\n\r\n    this.props.quizComplete(this.state.quizDone);\r\n  }\r\n\r\n  renderQuiz() {\r\n    return (\r\n      <div>\r\n        <Quiz\r\n          answer={this.state.answer}\r\n          currentAnswers={this.state.currentAnswers}\r\n          answerOptions={this.state.answerOptions}\r\n          questionId={this.state.questionId}\r\n          question={this.state.question}\r\n          questionTotal={this.state.questionTotal}\r\n          onAnswerSelected={this.handleAnswerSelected}\r\n          loadDatabase={this.loadDatabase}\r\n          questions={this.state.questions}\r\n          ansOpt={this.state.ansOpt}\r\n          currQuestion={this.state.currQuestion}\r\n          getQuestion={this.getQuestion}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderResult() {\r\n    return <Result quizResult={this.state.result} />;\r\n  }\r\n\r\n  startNewQuiz() {\r\n    //(re-)starting new quiz\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.result ? this.renderResult() : renderQuiz()\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizCard;"]},"metadata":{},"sourceType":"module"}